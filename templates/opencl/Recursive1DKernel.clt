#pragma OPENCL EXTENSION cl_khr_fp64: enable

// Other Sources Required
{{other_sources}}

// Specific Map Lambda Function
{{iter_lambda_def}}

__kernel void {{recursive_kernel_name}}(int workUnits, __global {{r_type}}* starts, __global const {{r_type}}* ends, __global {{t_type}}* accs, __global int* results, __global {{r_type}}* steps, int global_counter {{extra_args}}) {
	int iter_global_id = get_global_id(0);
	accs[iter_global_id] = 0;
	results[iter_global_id] = 0;
	
	if (iter_global_id >= workUnits) {
		return;
	}
	
	if (global_counter == 0) {
		steps[iter_global_id] = ends[iter_global_id] - starts[iter_global_id];
	}
	
	int rs;
	
	int counter;
	counter = 0;
	
	{{r_type}} stepX, end;
	
	while (starts[iter_global_id] < ends[iter_global_id] && counter < {{limit}} ) {
		counter++;
		end = starts[iter_global_id] + steps[iter_global_id];
		if (end > ends[iter_global_id]) end = ends[iter_global_id];
 		{{t_type}} tacc = {{iter_lambda_name}}( starts[iter_global_id], end, &rs {{extra_args_call}});
		if (rs == 1) {
			results[iter_global_id] = 1;
			starts[iter_global_id] = end;
			accs[iter_global_id] += tacc;
		} else {
			stepX = steps[iter_global_id];
			{{split}}
			steps[iter_global_id] = stepX;
		}
	}
	results[iter_global_id] = 2;
}
