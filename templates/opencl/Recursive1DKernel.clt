#pragma OPENCL EXTENSION cl_khr_fp64: enable

// Other Sources Required
{{other_sources}}

// Specific Map Lambda Function
{{iter_lambda_def}}

__kernel void {{recursive_kernel_name}}(__global {{r_type}}* starts, __global const {{r_type}}* ends, __global {{t_type}}* accs, __global int* results, const int rec_counter, const int reuse_steps, __global {{r_type}}* steps {{extra_args}}) {
	int iter_global_id = get_global_id(0);
	
	results[iter_global_id] = 0;
	__local int rs;
	
	__local int counter;
	counter = 0;
	
	__local {{r_type}} stepX, end;
	
	__local {{t_type}} tacc;
	if (rec_counter == 0) {
		accs[iter_global_id] = 0;
	}
	
	if (reuse_steps) {
		stepX = steps[iter_global_id];
	} else {
		stepX = ends[iter_global_id] - starts[iter_global_id];
	}
	
	while (starts[iter_global_id] < ends[iter_global_id]) {
		counter++;
		if (counter > {{limit}}) {
			return;
		}
		end = starts[iter_global_id] + stepX;
		if (end > ends[iter_global_id]) end = ends[iter_global_id];
 		tacc = {{iter_lambda_name}}( starts[iter_global_id], end, &rs {{extra_args_call}});
		if (rs == 1) {
			results[iter_global_id] = 1;
			starts[iter_global_id] = end;
			accs[iter_global_id] += tacc;
		} else {	
			{{split}}
			steps[iter_global_id] = stepX;
		}
	}
	results[iter_global_id] = 2;
}
