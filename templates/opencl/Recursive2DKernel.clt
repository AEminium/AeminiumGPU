#pragma OPENCL EXTENSION cl_khr_fp64: enable

// Other Sources Required
{{other_sources}}

// Specific Map Lambda Function
{{iter_lambda_def}}

__kernel void {{recursive_kernel_name}}(__global {{r_type}}* starts, __global const {{r_type}}* ends, __global {{r2_type}}* tops, __global const {{r2_type}}* bottoms, __global {{t_type}}* accs, __global int* results, int use_same_acc = 0; {{extra_args}}) {
	int iter_global_id = get_global_id(0);
	results[iter_global_id] = 0;
	accs[iter_global_id] = 0;
	
	__local int rs;
	rs = 0;
	
	__local int counter;
	counter = 0;
	
	__local {{r_type}} start, end, stepX;
	__local {{r2_type}} top, bottom, stepY;
	start = starts[iter_global_id];
	end = ends[iter_global_id];
	top = tops[iter_global_id];
	bottom = tops[iter_global_id];
	stepX = end - start;
	stepY = top - bottom;
	
	__local {{t_type}} acc, tacc;
	if (use_same_acc) {
		acc = accs[iter_global_id];
	} else {
		acc = 0;
	}
	__local int avoid_partial_save;
	avoid_partial_save = 0;
	
	while ( start < ends[iter_global_id] && top < bottoms[iter_global_id]) {
		tacc = {{iter_lambda_name}}(start, start + stepX, top, top + stepY, &rs {{extra_args_call}});
		if (rs == 1) {
			if (!avoid_partial_save) {
				results[iter_global_id] = 1;
				avoid_partial_save = 1;
			}
			accs[iter_global_id] = acc;
			acc = acc + tacc;
			rs = 0;
			if (start < ends[iter_global_id]) { 
				start = start + stepX;
				starts[iter_global_id] = start;
			} else {
				start = starts[iter_global_id];
				top = top + stepY;
				tops[iter_global_id] = top;
			}
		} else {
			{{split}}
		}
		counter++;
		if (counter > {{limit}}) return;
	}
	
	results[iter_global_id] = 2;
}
