#pragma OPENCL EXTENSION cl_khr_fp64 : enable

#define MERGE(acc,other {{extra_args_call}}) acc = {{reduce_lambda_name}}(acc,other, {{extra_args_call}})


// Other Sources Required
{{other_sources}}

// Specific Map Lambda Function
{{map_lambda_def}}

// Specific Reduce Lambda Function
{{reduce_lambda_def}}

inline {{output_type}} get_accumulator() {
	{{seed_source}}
}

__kernel void {{reduce_kernel_name}}(
			__global const {{input_type}}* map_input,
			__global {{output_type}}* reduce_input,
			__global {{output_type}}* reduce_output,
			long dataLength, 
   			long blocks,
   			long blockLength,
			const int first {{extra_args}}) {
			
	long block = get_global_id(0);
	if (block >= blocks)
		return;
        
	long inputStart = block * blockLength;
	long inputEnd = min(inputStart + blockLength, dataLength);
        
	{{output_type}} total = ({{output_type}}) get_accumulator();
	if (first) {
		for (int inputOffset = inputStart; inputOffset < inputEnd; inputOffset++)
			MERGE(total, {{map_lambda_name}}({{get_input}} {{extra_args_call}}));
	} else {
		for (int inputOffset = inputStart; inputOffset < inputEnd; inputOffset++)
			MERGE(total, reduce_input[inputOffset]);
	}
        
	reduce_output[block] = total;
}