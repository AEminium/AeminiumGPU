#pragma OPENCL EXTENSION cl_khr_fp64 : enable

// Other Sources Required
{{other_sources}}

// Specific Map Lambda Function
{{map_lambda_def}}

// Specific Reduce Lambda Function
{{reduce_lambda_def}}

__kernel void {{reduce_kernel_name}}(
			__global {{input_type}}* map_input,
			__global {{output_type}}* reduce_input,
			__global {{output_type}}* reduce_output,
			__local {{output_type}}* reduce_shared,
			const int reduce_length,
			const int first) {
			
	int global_index = get_global_id(0);
	
	{{output_type}} accumulator = {{seed_source}};
	while (global_index < reduce_length) {
		{{output_type}} element;
		if (first)
			element = {{map_lambda_name}}(map_input[global_index]);
		else
			element = reduce_input[global_index];
		accumulator = {{reduce_lambda_name}}(accumulator, element);
		global_index += get_global_size(0);
	}
	
	int local_index = get_local_id(0);
	reduce_shared[local_index] = accumulator;
	barrier(CLK_LOCAL_MEM_FENCE);
	for(int offset = get_local_size(0) / 2; offset > 0; offset = offset / 2) {
		if (local_index < offset) {
			{{output_type}} reduce_other = reduce_shared[local_index + offset];
			{{output_type}} reduce_mine = reduce_shared[local_index];
			reduce_shared[local_index] = {{reduce_lambda_name}}(reduce_mine, reduce_other);
		}
		barrier(CLK_LOCAL_MEM_FENCE);
	}
	if (local_index == 0)
		reduce_output[get_group_id(0)] = reduce_shared[0];
}